<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" version="3.0">

    <!-- 参数 -->
  <context-param>
      <param-name>DBUSER</param-name>
      <param-value>kissshot</param-value>
  </context-param>
    <context-param>
        <param-name>DBPWS</param-name>
        <param-value>password</param-value>
    </context-param>
    <context-param>
        <param-name>DBURL</param-name>
        <param-value>jdbc:mysql://localhost/mysql_db</param-value>
    </context-param>

    <!--  第一个 helloworld 程序  -->
  <servlet>
    <servlet-name>HelloWorld</servlet-name>
    <servlet-class>com.kissshot.servletDemo.servlet.Servlet4HelloWorld</servlet-class>
      <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>HelloWorld</servlet-name>
    <url-pattern>/helloWorld</url-pattern>
  </servlet-mapping>

    <!--  填写表单  -->
    <servlet>
        <servlet-name>HelloForm</servlet-name>
        <servlet-class>com.kissshot.servletDemo.servlet.HelloForm</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>HelloForm</servlet-name>
        <url-pattern>/HelloForm</url-pattern>
    </servlet-mapping>

    <!--  request 请求 -->
    <servlet>
        <servlet-name>Request</servlet-name>
        <servlet-class>com.kissshot.servletDemo.servlet.RequestInfoServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>Request</servlet-name>
        <url-pattern>/request</url-pattern>
    </servlet-mapping>

    <!-- 刷新 -->
    <servlet>
        <servlet-name>Refresh</servlet-name>
        <servlet-class>com.kissshot.servletDemo.servlet.Refresh</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>Refresh</servlet-name>
        <url-pattern>/refresh</url-pattern>
    </servlet-mapping>
    <!-- cookie 演示servlet-->
    <servlet>
        <servlet-name>cookie</servlet-name>
        <servlet-class>com.kissshot.servletDemo.servlet.CookieServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>cookie</servlet-name>
        <url-pattern>/cookie</url-pattern>
    </servlet-mapping>

    <!-- session 演示servlet-->
    <servlet>
        <servlet-name>session</servlet-name>
        <servlet-class>com.kissshot.servletDemo.servlet.SessionServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>session</servlet-name>
        <url-pattern>/session</url-pattern>
    </servlet-mapping>


    <servlet>
        <servlet-name>upload</servlet-name>
        <servlet-class>com.kissshot.servletDemo.servlet.UploadServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>upload</servlet-name>
        <url-pattern>/upload</url-pattern>
    </servlet-mapping>

    <!-- 添加过滤器
        web.xml 中的 filter-mapping 元素的顺序决定了 Web 容器应用过滤器到 Servlet 的顺序。
        若要反转过滤器的顺序，您只需要在 web.xml 文件中反转 filter-mapping 元素即可。
        <filter-name>用于为过滤器指定一个名字，该元素的内容不能为空。
        <filter-class>元素用于指定过滤器的完整的限定类名。
        <init-param>元素用于为过滤器指定初始化参数，它的子元素<param-name>指定参数的名字，<param-value>指定参数的值。
        也可以使用@WebListener
    -->
    <filter>
        <filter-name>LogFilter</filter-name>
        <filter-class>com.kissshot.servletDemo.filter.LogFilter</filter-class>
        <init-param>
            <param-name>Site</param-name>
            <param-value>百度</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>LogFilter</filter-name>
        <url-pattern>/*</url-pattern>
        <!--
           可以由一个带有 REQUEST 值的<dispatcher>元素，或者没有任何<dispatcher>元素来表示
           使用表示匹配<url-pattern> 或 <servlet-name>的 Web 组件的请求分派器的 forward()调用情况下处理请求。
可以由一个带有 FORWARD 值的<dispatcher>元素表示。
            使用表示匹配<url-pattern> 或 <servlet-name>的 Web 组件的请求分派器的 include()调用情况下处理请求以由一个带有 INCLUDE 值的<dispatcher>元素表示
            错误处理”指定的错误页面机制处理匹配<url-pattern>的错误资源的请求。
可以由一个带有 ERROR 值的<dispatcher>元素表示
使用第 10 页指定的“异步处理”中的异步上下文分派机制对 web 组件使用 dispatch 调用处理请求。
可以由一个带有 ASYNC 值的<dispatcher>元素表示
            可以组合
        -->
        <dispatcher>REQUEST</dispatcher>
    </filter-mapping>

    <!--   全局错误页面设置    -->
    <servlet>
        <servlet-name>ErrorHandler</servlet-name>
        <servlet-class>com.kissshot.servletDemo.error.ErrorHandler</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>ErrorHandler</servlet-name>
        <url-pattern>/test/ErrorHandler</url-pattern>
    </servlet-mapping>
    <error-page>
        <error-code>404</error-code>
        <!--<location>/test/ErrorHandler</location>-->
        <location>/404.html</location>
    </error-page>
    <error-page>
        <exception-type>java.lang.Throwable</exception-type>
        <location>/test/ErrorHandler</location>
    </error-page>

    <!-- 如果您使用的是 Tomcat，除了上述方法，您还可以在 web.xml 文件中配置 session 会话超时 单位分 默认是30 -->
    <!--<session-config>-->
        <!--<session-timeout>2</session-timeout>-->
    <!--</session-config>-->

    <!-- 按顺序找欢迎页面 -->
    <welcome-file-list>
        <welcome-file>login.jsp</welcome-file>
        <welcome-file>index.jsp</welcome-file>
        <!--<welcome-file>home.jsp</welcome-file>-->
    </welcome-file-list>
</web-app>
